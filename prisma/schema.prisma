// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Video {
    id           String        @id @default(cuid())
    title        String
    description  String?
    duration     Int?
    thumbnailUrl String?
    category     String?
    userId       String        @map("user_id")
    comments     Comment[]
    likes        Like[]
    hlsPlaylist  HlsPlaylist[] @relation
    uploadId     String        @unique @map("upload_id")
    upload       Upload        @relation(fields: [uploadId], references: [id])
    createdAt    DateTime      @default(now()) @updatedAt
    HlsSegment   HlsSegment[]

    @@index([userId])
    @@index([uploadId])
    @@map("videos")
}

model HlsPlaylist {
    id                    String       @id @default(uuid())
    video                 Video        @relation(fields: [videoId], references: [id])
    videoId               String
    key                   String
    resolution            String?
    url                   String?
    createdAt             DateTime     @default(now())
    updatedAt             DateTime     @updatedAt
    segments              HlsSegment[]
    allowCache            Boolean?
    endList               Boolean?
    mediaSequence         Int?
    discontinuitySequence Int?
    playlistType          String?
    targetDuration        Int?
    totalDuration         Int?
    discontinuityStarts   String?

    @@index([videoId])
}

model HlsSegment {
    id                 String      @id @default(uuid())
    playlist           HlsPlaylist @relation(fields: [playlistId], references: [id])
    playlistId         String
    video              Video       @relation(fields: [videoId], references: [id])
    videoId            String
    key                String
    url                String?
    resolution         String?
    duration           Float?
    segmentNumber      Int
    createdAt          DateTime    @default(now())
    updatedAt          DateTime    @updatedAt
    byterangeOffset    Int?
    byterangeLength    Int?
    discontinuity      Int?
    uri                String?
    timeline           Int?
    keyMethod          String?
    keyUri             String?
    keyIv              String?
    mapUri             String?
    mapByterangeOffset Int?
    mapByterangeLength Int?
    cueOut             String?
    cueOutCont         String?
    cueIn              String?
    custom             Json?

    @@index([playlistId])
    @@index([videoId])
}

model Comment {
    id      String @id @default(cuid())
    text    String
    userId  String @map("user_id")
    videoId String @map("video_id")
    Video   Video  @relation(fields: [videoId], references: [id])

    @@index([userId])
    @@index([videoId])
    @@map("comments")
}

model Like {
    id      String @id @default(cuid())
    userId  String @map("user_id")
    videoId String @map("video_id")
    Video   Video  @relation(fields: [videoId], references: [id])

    @@index([userId])
    @@index([videoId])
    @@map("likes")
}

model VideoMetadata {
    id           String @id @default(cuid())
    name         String
    type         String
    filetype     String
    filename     String
    relativePath String

    uploadId String  @unique
    Upload   Upload?

    @@map("video_metadata")
}

model Upload {
    id            String         @id @default(cuid())
    size          Int?
    offset        Int
    creation_date DateTime?
    metadata      VideoMetadata? @relation(fields: [metadataId], references: [id])
    transcoded    Boolean        @default(false)
    metadataId    String?        @unique
    video         Video?

    @@map("uploads")
}
