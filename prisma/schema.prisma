// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum UserType {
  FREE
  PREMIUM
  ENTERPRISE
}

model Video {
  id           String            @id @default(cuid())
  title        String
  description  String?
  duration     Int?
  analyzedAt   DateTime?         @map("analyzed_at")
  publishedAt  DateTime?         @map("published_at")
  thumbnailUrl String?           @map("thumbnail_url")
  previewUrl   String?           @map("preview_url")
  category     String?
  userId       String            @map("user_id")
  comments     Comment[]
  likes        Like[]
  uploadId     String            @unique @map("upload_id")
  upload       Upload            @relation(fields: [uploadId], references: [id])
  createdAt    DateTime          @default(now()) @updatedAt @map("created_at")
  channel      Channel?          @relation(fields: [channelId], references: [id])
  channelId    String?
  private      Boolean?          @default(false)
  premium      Boolean?          @default(false) @map("subscription_required")
  playlists    VideoInPlaylist[]
  views        View[]
  watchTime    WatchTime[]

  @@index([title], name: "title")
  @@index([userId], name: "user_id")
  @@index([uploadId], name: "upload_id")
  @@index([channelId])
  @@map("videos")
}

model Upload {
  id     String  @id @default(cuid())
  video  Video?
  assets Asset[]

  @@unique([id])
  @@index([id], name: "id")
  @@map("uploads")
}

model Asset {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  filename  String
  mimeType  String   @map("mime_type")
  size      Int
  url       String
  width     Int?
  height    Int?
  duration  Float?
  uploadId  String?  @map("upload_id")
  upload    Upload?  @relation(fields: [uploadId], references: [id])

  @@unique([id])
  @@index([filename], name: "filename")
  @@index([mimeType], name: "mime_type")
  @@index([uploadId], name: "upload_id")
  @@map("assets")
}

model Comment {
  id              String    @id @default(cuid())
  text            String
  userId          String    @map("user_id")
  videoId         String?   @map("video_id")
  video           Video?    @relation(fields: [videoId], references: [id])
  parentComment   Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  parentCommentId String?   @map("parent_comment_id")
  comments        Comment[] @relation("CommentToComment")

  createdAt DateTime @default(now()) @updatedAt @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  likes     Like[]

  @@index([userId], name: "user_id")
  @@index([videoId], name: "video_id")
  @@index([parentCommentId])
  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  videoId   String?  @map("video_id")
  video     Video?   @relation(fields: [videoId], references: [id])
  commentId String?  @map("comment_id")
  comment   Comment? @relation(fields: [commentId], references: [id])

  @@index([userId], name: "user_id")
  @@index([videoId], name: "video_id")
  @@index([commentId], name: "comment_id")
  @@map("likes")
}

model Channel {
  id            String         @id @default(cuid())
  name          String
  description   String?
  userId        String         @map("user_id")
  videos        Video[]
  subscriptions Subscription[]
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")

  @@index([userId], name: "user_id")
  @@map("channels")
}

model SubscriptionPlan {
  id           String                    @id @default(cuid())
  name         String
  price        Float
  createdAt    DateTime                  @default(now()) @map("created_at")
  updatedAt    DateTime                  @updatedAt @map("updated_at")
  benefits     SubscriptionPlanBenefit[]
  Subscription Subscription[]

  @@map("subscription_plans")
}

model SubscriptionPlanBenefit {
  id                 String           @id @default(cuid())
  benefit            String
  subscriptionPlan   SubscriptionPlan @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String           @map("subscription_plan_id")

  @@index([subscriptionPlanId], name: "subscription_plan_id")
  @@map("subscription_plan_benefits")
}

model Subscription {
  id        String           @id @default(cuid())
  userId    String           @map("user_id")
  channelId String           @map("channel_id")
  planId    String           @map("plan_id")
  channel   Channel          @relation(fields: [channelId], references: [id])
  plan      SubscriptionPlan @relation(fields: [planId], references: [id])
  createdAt DateTime         @default(now()) @map("created_at")

  @@index([userId], name: "user_id")
  @@index([channelId], name: "channel_id")
  @@index([planId], name: "plan_id")
  @@map("subscriptions")
}

model Playlist {
  id          String            @id @default(cuid())
  name        String
  description String?
  private     Boolean           @default(false)
  premium     Boolean           @default(false)
  userId      String            @map("user_id")
  videos      VideoInPlaylist[]
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  @@index([userId], name: "user_id")
  @@map("playlists")
}

model VideoInPlaylist {
  id         String   @id @default(cuid())
  videoId    String   @map("video_id")
  video      Video    @relation(fields: [videoId], references: [id])
  playlistId String   @map("playlist_id")
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")

  @@index([videoId], name: "video_id")
  @@index([playlistId], name: "playlist_id")
  @@map("videos_in_playlists")
}

model View {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  videoId   String   @map("video_id")
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId], name: "user_id")
  @@index([videoId], name: "video_id")
  @@map("views")
}

model WatchTime {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  videoId   String   @map("video_id")
  video     Video    @relation(fields: [videoId], references: [id])
  duration  Int // in seconds
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId], name: "user_id")
  @@index([videoId], name: "video_id")
  @@map("watch_times")
}
